$(document).ready(function() {
    initialize();
    initialize_websockets();

    $(".alert").delay(5000).fadeOut('slow');
});

$('#map_canvas').ready(function() {
    create_map();
});

//__Variables & init functions
    var base_url = "https://locatemystickers.herokuapp.com";
    // var base_url = "http://localhost:3000";
    var list_stickers = [];
    var list_friends = [];
    var me = null;
    var map = null;
    var VirtualPointer;

    function initialize () {
        cube_fix();
        add_events_listner();
        get_me(get_me_callback);
    }

    function init_me(json_initial, callback) {
        if (json_initial.user != null && json_initial.stickers != null) {
            me = json_initial.user;
            me.stickers = json_initial.stickers;

            // Create markers here to display marker faster when user ask for it.
            for(i=0;i<me.stickers.length;i++) {
                sticker = me.stickers[i].sticker;
                me.stickers[i].marker = create_marker(sticker);
                me.stickers[i].locations.reverse();
            }

            callback.call(true);
        } else {
            console.log("[error] initialize failure")
            callback.call(false);
        }
    }

    function initialize_websockets () {
        // Enable pusher logging - don't include this in production
        // Pusher.log = function(message) {
        //   if (window.console && window.console.log) {
        //     window.console.log(message);
        //   }
        // };

        var pusher = new Pusher('ba676f4f7e8139bcf138');
        // var test_channel = pusher.subscribe('test_channel');
        //   test_channel.bind('my_event', function(data) {
        // });
        var locations_channel = pusher.subscribe('locations_channel');
        locations_channel.bind('new_location', function(json_data) {
            new_sticker_position(75, json_data.location);
        });
    }
//\_Application setup and start

//__Callbacks
    function get_me_callback() {
        // this = json_initial
        if (this != false) {
            init_me(this, init_me_callback);
        }
    }

    function init_me_callback() {
        if (this == true) {
            // me, me.stickers & me.stickers.marker created
            init_dom_elements();
            initialize_websockets();
            console.log('ready');
            //--> Socket to listen new locations: Store the new locations. 
        }
    }
//\_Callbacks

//__DOM Elements
    function init_dom_elements() {
        create_stickers_cards();
        create_friends_cards();
        // create_me_card();
    }

    function create_me_card() {
        if (me != null) {
            $('<img>', {
                'id':'me_img',
                'src':'http://www.gravatar.com/avatar/'+md5(me.email)+'.jpg?s=50&d=m'
            }).appendTo("#me_button");   
        }
    }

    function create_stickers_cards() {
        if (me.stickers != null) {
            $('#loading_stickers').addClass('hidden');
            $.each(me.stickers, create_sticker_card);
        }
    }

    function create_sticker_card(key, value) {
        $("<div>", {
            "id":   'sticker_'+value.sticker.id,
            "class":'sticker_card',
            html:   '<label style="background-color:#78B0EC"></label>'+
                    '<p></p>'+
                    '<h2 class="card_name">'+value.sticker.name+'</h2>'+
                    '<div class="options">'+
                        '<div class="spinner hidden"></div>'+
                        '<h2 class="Position">Position</h2>'+
                        '<h2 class="History">History</h2>'+
                    '</div>'
        }).appendTo("#stickers_list");

        // Listen click on the new sticker_card. 
        $('#sticker_'+value.sticker.id).click(sticker_on_click);
    }

    function create_friends_cards() {
        if (me.friends != null) {
            $.each(me.friends, create_friend_card);         
        }
    }

    function create_friend_card(key, value) {
        $("<img>", {
            "id":   'friend_'+value.id,
            "class":'friend_card',
            "src":'http://www.gravatar.com/avatar/'+md5(value.email)+'.jpg?s=49&d=mm'
        }).appendTo("#friends_list");
    }
//\_DOM Elements

//__Helpers --> Must be implemented in the objects or object callback.
    // First, we add the location and we move. Then, we add a add.position function to the sticker. And the callback is the display (if stickers[x].sticker.visible = true)
    function new_sticker_position(sticker_id, json_location) {
        var index = get_sticker_index(sticker_id);
        var sticker = me.stickers[index];

        if (json_location.latitude != null && json_location.longitude != null) {
            // Add the new location for 'sticker_id'
            sticker.locations.push(json_location);

            // Update sticker last position
            sticker.sticker.last_latitude    = json_location.latitude;
            sticker.sticker.last_longitude   = json_location.longitude;

            update_sticker_position(sticker, true);
        }
    }

    function update_sticker_position(sticker, center_map) {
        // Set la position du marker sur    sitcker.last_lat & last_lng
        var latlng = new google.maps.LatLng(sticker.sticker.last_latitude, sticker.sticker.last_longitude);
        sticker.marker.setPosition(latlng);

        // Later, check if 'me.lock_view == true'
        if (sticker.sticker.visible == true && center_map == true)
            map.panTo(latlng);
    }
//\_Helpers --> Must be implemented in the objects or object callback.

//__Hide and show animations
    function toggle_friends_list (event) {
        $('#friends_list').toggleClass('visible');
        $('#friends_button').toggleClass('active');
    }

    function toggle_stickers_list (event) {
        $('#stickers_list').toggleClass('stickers_list_visible');
        $('#stickers_button').toggleClass('active');
    }

    function sticker_on_click(event, s_sticker_id) {

        // SIMULATE TMP Function
        if (event == 'simulate_position') {
            index = get_sticker_index(s_sticker_id);
            sticker = me.stickers[index];
            if (sticker.marker === "undefined") {
                sticker.marker = create_marker(sticker.sticker);
            }
            change_visibility(s_sticker_id, sticker);
            return;
        }

        var sticker_id = event.currentTarget.id.substr(8);
        var index = get_sticker_index(sticker_id);
        var sticker = me.stickers[index];

        if (sticker.marker === "undefined") {
            sticker.marker = create_marker(sticker.sticker);
        }

        if (sticker.marker != "undefined") {
            if ($(event.target).hasClass('Position')) {
                // Position 'clicked'
                change_visibility(sticker_id, sticker);
            } else if ($(event.target).hasClass('History')) {
                // History 'clicked'
                play_history(sticker_id, sticker);
            }
        } else {
            console.log("error: Can't create marker, lat lng or name error")
        }
    }

    function change_visibility(sticker_id, sticker) {
        if (sticker.sticker.visible == false) {
            sticker.marker.setVisible(true);
            sticker.sticker.visible = true;
        } else if (sticker.sticker.visible == true) {
            sticker.marker.setVisible(false);
            sticker.sticker.visible = false;
        }

        $('#sticker_'+sticker_id).toggleClass('active');
        $('#sticker_'+sticker_id+' .Position').toggleClass('active');
        $('#sticker_'+sticker_id+' p').toggleClass('active');
    }

    function play_history(sticker_id, sticker) {

        if (sticker.sticker.visible == false) {
            sticker.marker.setVisible(true);
            sticker.sticker.visible = true;
        }

        // Play history only if more than one location.
        if (sticker.locations.length > 1) {
            
            var one_day_ago_timestamp = new Date();
            var one_week_ago_timestamp = new Date();
            one_day_ago_timestamp.setDate( one_day_ago_timestamp.getDate() - 1 );
            one_week_ago_timestamp.setDate( one_week_ago_timestamp.getDate() - 7 );
            
            for (from=sticker.locations.length - 1;from>0;from--) {
                var created_at_timestamp = new Date().getTime(sticker.locations[from].created_at);

                if (created_at_timestamp < one_week_ago_timestamp) {
                    console.log('more than 1 week');
                    break;
                } else {
                    console.log('create at:['+created_at_timestamp+'], one_day_ago:['+one_week_ago_timestamp+']');
                }
            }

            if (from >= 0) {
                console.log('[ok] calling animate with: from='+from);
                animate_sticker_marker(sticker, from);
            }
            //var date = Date.parse(locations[x].created_at);
        } else {
            console.log('[warning] locations < 2');
        }

        /*
            on se met sur la last (i = leng)
            et on decrease tant que i > 0.

            0 - vieille
            1 -         - 
            2 -         - one day ago ok
            3 - recente 
            4 - last
        */

        // Re-work this area
        $('#sticker_'+sticker_id).toggleClass('active');
        $('#sticker_'+sticker_id+' .History').toggleClass('active');
        $('#sticker_'+sticker_id+' p').toggleClass('active');
    }

    function animate_sticker_marker(sticker, to) {
        
        if (to > sticker.locations.length - 1)
            return;

        var location = sticker.locations[to];
        var latlng = new google.maps.LatLng(location.latitude, location.longitude);
        sticker.marker.setPosition(latlng);

        // Replace 100 with the real timeStamp
        t = setTimeout(function () {
            animate_sticker_marker(sticker, (to+1));
        }, 100);
    }


    function play_sticker_history(sticker) {
        console.log(sticker);
        if (sticker.polylines.length > 0) {
            //var path = routes.overview_path;
            var distance = 5; // Every 5 meters.
            
            animate_marker(sticker, 0, 0);

            /*for (m=0;m<sticker.polylines.length;m++) {
                polyline = sticker.polylines[m];

                //animate_marker(distance, sticker, polyline);
                 
                var points = polyline.GetPointsAtDistance(distance);
               
                if (points.length > 0)
                    animate_marker(sticker, points, points.length - 1);
            }*/
            
            /*for (m=0;m<sticker.history_steps.length;m++) {
                var legs = sticker.history_steps[m].legs;
                
                for (i=0;i<legs.length;i++) {
                    if (i == 0) { 
                        //startLocation.latlng = legs[i].start_location;
                        //startLocation.address = legs[i].start_address;
                        //// marker = google.maps.Marker({map:map,position: startLocation.latlng});
                        //marker = createMarker(legs[i].start_location,"start",legs[i].start_address,"green");
                    }
                    //endLocation.latlng = legs[i].end_location;
                    //endLocation.address = legs[i].end_address;
                    
                    var steps = legs[i].steps;
                    for (j=0;j<steps.length;j++) {
                        var nextSegment = steps[j].path;
                        for (k=0;k<nextSegment.length;k++) {
                            var next_segment = new google.maps.LatLng(nextSegment[k].lb, nextSegment[k].mb);
                            

                            t = setTimeout(sticker.marker.setPosition(next_segment), 100);
                            //polyline.getPath().push(nextSegment[k]);
                            //bounds.extend(nextSegment[k]);
                        }
                    }
                }
            }*/
        } else {
            console.log('no history');
        }
    }

    // Distance d'une polyline.. 
    function animate_marker(sticker, i_polyline, i_point) {

        // Only if point exist ?                        
        points = sticker.polylines[i_polyline].points;
        point = points[i_point];
        
        sticker.marker.setPosition(point);

        if (i_point >= points.length - 1) {
            if (i_polyline >= sticker.polylines.length - 1) {
                // console.log('end of: Polylines & Points');
                return;
            } else {
                // console.log('next polyline');
                i_polyline = i_polyline + 1;
                i_point = 0;
                t = setTimeout(function () {
                    animate_marker(sticker, i_polyline, i_point);
                }, 10);
            }
        } else {
            // console.log('next point');
            i_point = i_point + 1;
            p = setTimeout(function () {
                animate_marker(sticker, i_polyline, i_point);
            }, 10);
        }

        // Next todo: geocode the position ? To display a new adress if it change.
        // Update poly: Trace poly to the next 5m distance.    
   }
//\_Hide and show animations

//__Getters: me, sticker_index.
    function get_me(callback) {
        // Log request
        $.getJSON(base_url+'/users/1/initialize_data.json', function (json_initial, status) {
            // Check what is a valid status 
            if (status == "success") {
                callback.call(json_initial);
            } else {
                console.log("[error] bad status");
                callback.call(false);
            }
        });
    }

    function get_sticker_index(sticker_id) {
        var index_sticker = null;

        for(j=0; j<me.stickers.length; j++) {
            if (me.stickers[j].sticker.id == sticker_id) {
                index_sticker = j;
                break;
            }
        }

        return index_sticker;
    }

    function get_directions(sticker_key, from, to, checkpoints) {
        //directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
        var directionsService = new google.maps.DirectionsService();
        var travelMode = google.maps.DirectionsTravelMode.DRIVING;

        var request = {
            origin: from,
            destination: to,
            travelMode: travelMode
        };

        directionsService.route(request, function(response, status) {
            if (status == google.maps.DirectionsStatus.OK) {   
                var route = response.routes[0];
                for (i=0; i<route.legs.length; i++) {
                    for (j=0; j<route.legs[i].steps.length; j++) {
                        polyline = new google.maps.Polyline();
                        var nextSegment = route.legs[i].steps[j].path;
                        for (k=0;k<nextSegment.length;k++) {
                            polyline.getPath().push(nextSegment[k]);

                            //bounds.extend(nextSegment[k]);
                        }

                        polyline.points = polyline.GetPointsAtDistance(5);
                        //polyline = route.legs[i].steps[j].polyline;
                        list_stickers[sticker_key].polylines.push(polyline);
                    }
                }
            } else {
                console.log('no route: '+status);
            }
        });
    }
//\_Getters: stickers, friends, sticker_history.
    

//__Create objects: map, marker, sticker, sticker.location, stickers.cards, friends, friends cards, history, address.
    function create_map() {
        // todo: map_center = bounds(-positions actuels de tout les stickers-), prendre les points les plus loings ( plus grandes valeur lat, lng )
        var map_center = new google.maps.LatLng(48.857423, 2.35147);

        var map_options = {
            zoom: 10,
            center: map_center,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            streetViewControl: true,
            mapTypeControl: true,
            panControl: false,
            zoomControl: true,
            scaleControl: true,
            overviewMapControl: false
        };

        map = new google.maps.Map(document.getElementById("map_canvas"), map_options);
        //var googleEarth = new GoogleEarth(map);
    }

    function create_marker(sticker) {
        if (sticker.last_latitude != null && sticker.last_longitude != null && sticker.name != null) {
            var infowindow = new google.maps.InfoWindow(
            {
                size: new google.maps.Size(150,50)
            });

            var position = new google.maps.LatLng(sticker.last_latitude, sticker.last_longitude);

            var marker_description = '<b>'+sticker.name+'</b>';
            var marker = new google.maps.Marker({
                position: position,
                map: map,
                animation: google.maps.Animation.DROP,
                title: sticker.name,
                zIndex: Math.round(position.lat()*-100000)<<5
            });

            infowindow.setContent(marker_description);
            marker.setVisible(false);
            sticker.visible = false;
            //infowindow.open(map,marker);
            return marker
        } else {
            return "undefined";
        }
    }

    function create_history_leg(routes) {
        var history_step = new Object();

        history_step.legs   = routes.legs;

        return history_step;
    }

    // Function will be re-worked later - POC
    function create_stickers_history() {
        if (list_stickers != null) {
            $.each(list_stickers, function(key, sticker) {
                if (sticker.locations.length > 2) {
                    for(i=0; i<sticker.locations.length - 1; i++) {
                        var sticker_latitude        = sticker.locations[i].latitude;
                        var sticker_latitude_next   = sticker.locations[i+1].latitude;
                        var sticker_longitude       = sticker.locations[i].longitude;
                        var sticker_longitude_next  = sticker.locations[i+1].longitude;

                        if (sticker_latitude != '0' && sticker_longitude != '0' && 
                            sticker_longitude_next != '0' && sticker_latitude_next != '0' &&
                            sticker_latitude != sticker_latitude_next && sticker_longitude != sticker_longitude_next)
                        {
                            var from =  new google.maps.LatLng(sticker.locations[i].latitude, sticker.locations[i].longitude);
                            var to =    new google.maps.LatLng(sticker.locations[i+1].latitude, sticker.locations[i+1].longitude);

                            // Cant call get_directions too much time.
                            // console.log(list_stickers[sticker]);
                            get_directions(key, from, to);
                        } else {
                            //console.log('anormal: latitude or longitude = 0');
                        }
                    }
                } else {
                   
                }
            });
        }
        // Move this function on the server, and get sticker.locations.directions[] from server.

        return true;
    }

    // Allow one request to get all address (use it for sticker.loation.address ? to avoid requests)--> Check - https://developers.google.com/maps/documentation/geocoding/?hl=FR#GeocodingRequests
    function create_address(lat, lng, address) {
        if (typeof(lat)!=='undefined' && typeof(lng)!=='undefined')
        {
            var latlng = new google.maps.LatLng(lat, lng);
            geocoder.geocode( { 'latlng': latlng}, function(results, status) {
                console.log(results);

                // Contains the geocoded address
                return results[0].formatted_address;
            });
        } else if (typeof(address)!=='undefined') {
            var geocoder = new google.maps.Geocoder();
            geocoder.geocode( { 'address': address}, function(results, status) {
                console.log(results);

                // Contains the geocoded latitude,longitude
                return results[0].geometry.location;
            });
        } else {
            console.log('error code: #421 - please contact administrators with the code.');
            return null;
        }
    }
//\_Create objects: map, marker, sticker, sticker.location, stickers.cards, friends, friends cards, history, address.

//__Helpers: listner, fix
    function add_events_listner() {
        $('#stickers_button').click(toggle_stickers_list);
        $('#friends_button').click(toggle_friends_list);

        /*document.onmousemove = function(e)
        {
            var x = e.pageX;
            var y = e.pageY;
            console.log(x);
            console.log(y);
            // do what you want with x and y
        };*/

         // SIMULATE TMP Function
        $('#get_started').click(function() {
            //$('.wrapper_cube').css('-webkit-perspective', '1000px');
            //$('.cube').css('-webkit-transform','rotateX(-90deg) translateZ(140px)');
            
            //$('.cube').toggleClass('show_up');
            $('#music_visit').get(0).play();

            var tm0 = setTimeout(function() {
                var windows_height  = $('#first_actions').height();
                var translation_z   = (windows_height) / 2;
                $('.cube').css('-webkit-transform', 'translateZ(-'+translation_z+'px) rotateX(-90deg)');
                $('.wrapper_cube').toggleClass('zoom_out_1');

                var tm0 = setTimeout(function() {
                    toggle_stickers_list();
                    stickers_id = new Array(5, 2, 6, 4);

                    var tm1 = setTimeout(simulate_sticker_card(stickers_id, 0), 1400);

                    var tm8 = setTimeout(function () {
                        var windows_height  = $('#first_actions').height();
                        var translation_z   = (windows_height) / 2;
                        $('.cube').css('-webkit-transform', 'translateZ(-'+translation_z+'px) rotateX(-180deg)');
                        $('.wrapper_cube').toggleClass('zoom_out_1');
                    }, 15000)
                }, 5000);
            }, 2000);
        });
    }

    function simulate_sticker_card(stickers_id, i) {
        var j = i;

        if (j > 4) {
            return;
        }

        sticker_id = stickers_id[j];
        var tm2 = setTimeout(function() {
            $('#sticker_'+sticker_id).css('background','#ccc');
            $('#sticker_'+sticker_id+' .options').css('opacity','0.9');
            $('#sticker_'+sticker_id+' .options .Position').toggleClass('active');

            var tm3 = setTimeout(function() {
                sticker_on_click('simulate_position', sticker_id);
                $('#sticker_'+sticker_id).css('background','#fff');
                $('#sticker_'+sticker_id+' .options').css('opacity','0');
                $('#sticker_'+sticker_id+' .options .Position').toggleClass('active');

                j = j + 1;
                simulate_sticker_card(stickers_id, j);
            }, 800);
        }, 1300);
    }

    function cube_fix() {
            var windows_height  = $('#first_actions').height();
            var translation_z   = (windows_height) / 2;

            $('.cube').css('-webkit-transform', 'translateZ(-'+translation_z+'px)');
            $('.front').css('-webkit-transform', 'rotateX(0deg) translateZ('+translation_z+'px)');
            $('.up').css('-webkit-transform', 'rotateX(90deg) translateZ('+translation_z+'px)');
            $('.back').css('-webkit-transform', 'rotateX(180deg) translateZ('+translation_z+'px)');
    }
//\_Helpers: listner, fix

//  TODO : Change WRAPPER, CONTAINER, .. pour AREA ! Wrapper_sticker --> sticker_area

/*

$('#understand_layout').click(function() {
    $('#no_sticker_yet').toggleClass('hidden up');
});

$('#no_sticker_yet .get').click(function() {
    $('#no_sticker_yet').toggleClass('hidden');
    $('#get_sticker').toggleClass('hidden');
});

$('#no_sticker_yet .add').click(function() {
    $('#no_sticker_yet').toggleClass('hidden');
    $('#add_sticker').toggleClass('hidden');
});

function nextface(up) {

}*/

/* NOT SURE ABOUT THIS FUNCTION
    function live_location(lat, lng, title) {
        var infowindow = new google.maps.InfoWindow(
        {
            size: new google.maps.Size(150,50)
        });

        var position = new google.maps.LatLng(lat, lng);

        var marker_description = '<b>'+title+'</b>';
        var marker = new google.maps.Marker({
            position: position,
            map: map,
            animation: google.maps.Animation.DROP,
            title: "titlex",
            zIndex: Math.round(position.lat()*-100000)<<5
        });
        
        // Maybe not required, test without
        //marker.setVisible(false);

        infowindow.setContent(marker_description);
        // infowindow.open(map,marker);

        return marker;
    }

function sleep(milliseconds) {
  var start = new Date().getTime();
  for (var i = 0; i < 1e7; i++) {
    if ((new Date().getTime() - start) > milliseconds){
      break;
    }
  }
}*/
